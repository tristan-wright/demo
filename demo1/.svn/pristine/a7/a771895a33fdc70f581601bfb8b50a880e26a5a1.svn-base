#include "main.h"
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Game {
	char player1;
	char player2;
	char* saveFileName;
	int* rows;
	int* cols;
	char curTurn;
	char** board;
};

struct Move {
	int* row;
	int* col;
};

/**
 * Determines whether a player type is correct.
 * @param playerType The player type entered.
 * @return True if a valid player type. Otherwise false.
 */
bool actual_player(char* playerType) {
	switch(*playerType) {
		case '0':
			return true;
		case '1':
			return true;
		case 'H':
			return true;
		default:
			return false;
	}
}

/**
 * Loads the dimensions for the board.
 * @param game Game information.
 * @param line Dimension information string.
 * @return Zero if loaded successfully.
 */
int load_size(struct Game* game, char* line) {
	game->rows = malloc(sizeof(int));
	game->cols = malloc(sizeof(int));

	int rows = atoi(strtok(line, " "));
	*game->rows = rows;

	int cols = atoi(strtok(NULL, " "));
	*game->cols = cols;

	return 0;
}

/**
 * Loads the current turn of the player.
 * @param game The game information.
 * @param line The current turn information string.
 * @return Zero if loaded successfully.
 */
int load_turn(struct Game* game, char* line) {
	if (!(line[0] == 'O' || line[0] == 'X')) {
		return 1;
	}
	game->curTurn = line[0];
	return 0;
}

/**
 * Loads the board into the game information.
 * @param game The game information.
 * @param buff A buffer to use when reading save.
 * @param file The file pointer to use when reading save file.
 * @return Zero if successful.
 */
int load_board(struct Game* game, char* buff, FILE* file) {
	char** board;

	board = malloc(sizeof(char*) * *game->rows);
	for (int l = 0; l < *game->rows; ++l) {
		board[l] = malloc(sizeof(char*) * *game->cols * 2);
	}

	for (int j = 0; j < *game->rows; ++j) {
		fgets(buff, 255, file);

		for (int i = 0; i < *game->cols * 2; ++i) {
			board[j][i] = buff[i];
		}
	}

	game->board = board;
	return 0;
}

/**
 * Handles the entire loading process for the game.
 * @param game Game information
 * @return Zero if successful.
 */
int load_save(struct Game* game) {
	FILE* file = fopen(game->saveFileName, "r");
	char* buff = malloc(sizeof(char) * 255);

	if (file == NULL) {
		return 3;
	}

	//Loads the board dimensions.
	fgets(buff, 255, file);
	if (load_size(game, buff)) {
		return 4;
	}

	//Loads the next player.
	fgets(buff, 255, file);
	if (load_turn(game, buff)) {
		return 4;
	}

	//Loads the board.
	if (load_board(game, buff, file)) {
		return 4;
	}

	free(buff);
	fclose(file);
	return 0;
}

/**
 * Prints out the contents of the board.
 * @param game The game information.
 */
void print_board(struct Game* game) {
	for (int k = 0; k < *game->rows; ++k) {
		for (int i = 0; i < *game->cols * 2; ++i) {
			fprintf(stdout, "%c", game->board[k][i]);
		}
		fprintf(stdout, "\n");
	}
	return;
}
/**
 * Determines whether the current player is automated.
 * @param game Game information.
 * @return True if player is automated.
 */
bool is_auto_player(struct Game* game) {
	if (game->curTurn == 'O') {
		return (game->player1 != 'H');
	} else if (game->curTurn == 'X') {
		return (game->player2 != 'H');
	}
	return false;
}

/**
 * Updates the current turn in the game information.
 * @param game Game information.
 */
void next_turn(struct Game* game) {
	if (game->curTurn == 'O') {
		game->curTurn = 'X';
	} else if (game->curTurn == 'X') {
		game->curTurn = 'O';
	}
}

/**
 * Determines whether a move is playable on the board. Then
 * plays the move.
 * @param game The game information.
 * @param row The row to play the move.
 * @param col The column to play the move.
 * @return True if the move is played. Otherwise false.
 */
bool play_move(struct Game* game, int row, int col) {
	if (row > *game->rows || col > *game->cols) {
		return false;
	}

	char tile = game->board[row][(col * 2) + 1];
	if (tile != '.') {
		return false;
	}

	game->board[row][(col * 2) + 1] = game->curTurn;

	return true;
}

/**
 * Handles the playing of a move on the board.
 * @param game The game information.
 * @return True if the move didn't end game.
 */
bool handle_input(struct Game* game) {
	char* buff = malloc(sizeof(char) * 255);
	int val1;
	int val2;
	bool status = false;

	while (!status) {
		fprintf(stdout, "%c:(R C)> ", game->curTurn);
		fgets(buff, 255, stdin);

		if (feof(stdin)) {
			return false;
		}

		val1 = atoi(strtok(buff, " "));
		val2 = atoi(strtok(NULL, " "));


		status = play_move(game, val1, val2);
	}

	return true;
}

/**
 * Main game loop.
 * @param game Game information.
 * @return
 */
int main_game(struct Game* game) {
	bool active = true;
	print_board(game);

	while(active) {
		if (is_auto_player(game)) {
			fprintf(stdout, "Player %c placed at %c %c\n", game->curTurn, '0', '0');
		} else {
			if (!(handle_input(game))) {
				fprintf(stderr, "End of file\n");
				return 5;
			}
		}
		print_board(game);
		next_turn(game);
	}

	return 0;
}

/**
 * Initial sequence to prepare the game before
 * the board becomes playable.
 * @param game The struct holding the game information
 * @return The exit status of the game.
 */
int start_game(struct Game* game) {

	int status = load_save(game);

	// Returns the error code if the game load fails.
	if (status != 0) {
		if (status == 3) {
			fprintf(stderr, "No file to load from\n");
		} else if (status == 4) {
			fprintf(stderr, "Invalid file contents\n");
		}
		return status;
	}
	return main_game(game);
}

/**
 * Start of the game and loading parameters.
 * @param argc The number of parameters.
 * @param argv The input parameters.
 * @return Zero if game executed successfully.
 */
int main(int argc, char** argv) {
	struct Game* game = malloc(sizeof(struct Game));
	game->saveFileName = argv[3];

	// Checks for valid number of payers.
	if (argc != 4) {
		fprintf(stderr, "Usage: push2310 typeO typeX fname\n");
		return 1;
	}

	// Checks for valid player.
	if (!actual_player(argv[1]) || !actual_player(argv[2])) {
		fprintf(stderr, "Invalid player type\n");
		return 2;
	} else {
		game->player1 = *argv[1];
		game->player2 = *argv[2];
	}

	return start_game(game);
}