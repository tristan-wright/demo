#include "main.h"
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Game{
	char player1;
	char player2;
	char* saveFileName;
	int* rows;
	int* cols;
	char curTurn;
	char** board;
};

/**
 * Determines whether a player type is correct.
 * @param playerType The player type entered.
 * @return True if a valid player type. Otherwise false.
 */
bool isPlayer(char* playerType) {
	switch(*playerType) {
		case '0':
			return true;
		case '1':
			return true;
		case 'H':
			return true;
		default:
			return false;
	}
}

/**
 * Loads the dimensions for the board.
 * @param game Game information.
 * @param line Dimension information string.
 * @return Zero if loaded successfully.
 */
int load_size(struct Game* game, char* line) {
	game->rows = malloc(sizeof(int));
	game->cols = malloc(sizeof(int));

	int rows = atoi(strtok(line, " "));
	*game->rows = rows;

	int cols = atoi(strtok(NULL, " "));
	*game->cols = cols;

	return 0;
}

/**
 * Loads the current turn of the player.
 * @param game The game information.
 * @param line The current turn information string.
 * @return Zero if loaded successfully.
 */
int load_turn(struct Game* game, char* line) {
	game->curTurn = line[0];

	if (!(line[0] == 'O' || line[0] == 'X')) {
		return 1;
	}
	return 0;
}

int load_board(struct Game* game, char* buff, FILE* file) {
	while (fgets(buff, 255, file) != NULL) {
		fprintf(stdout, "%s", buff);
	}
	return 0;
}

/**
 * Handles the entire loading process for the game.
 * @param game Game information
 * @return Zero if successful.
 */
int load_save(struct Game* game) {
	FILE *file = fopen(game->saveFileName, "r");
	char* buff = malloc(sizeof(char) * 255);

	if (file == NULL) {
		return 3;
	}

	//Loads the board dimensions.
	fgets(buff, 255, file);
	if (load_size(game, buff)) {
		return 4;
	};

	//Loads the next player.
	fgets(buff, 255, file);
	if (load_turn(game, buff)) {
		return 4;
	}

	//Loads the board.
	if (load_board(game, buff, file)) {
		return 4;
	}
	return 0;
}

/**
 * Main game loop.
 * @param game Game information.
 * @return
 */
int main_game(struct Game* game) {
	printf("\n\n");
	printf("%d\n", *game->rows);
	printf("%d\n", *game->cols);
	printf("%c\n", game->curTurn);
	return 0;
}

/**
 * Initial sequence to prepare the game before
 * the board becomes playable.
 * @param game The struct holding the game information
 * @return The exit status of the game.
 */
int start_game(struct Game* game) {

	int status = load_save(game);

	// Returns the error code if the game load fails.
	if (status != 0) {
		if (status == 3) {
			fprintf(stderr, "No file to load from\n");
		}else if (status == 4) {
			fprintf(stderr, "Invalid file contents\n");
		}
		return status;
	}
	return main_game(game);
}

/**
 * Start of the game and loading parameters.
 * @param argc The number of parameters.
 * @param argv The input parameters.
 * @return Zero if game executed successfully.
 */
int main(int argc, char** argv) {
	struct Game *game = malloc(sizeof(struct Game));
	game->saveFileName = argv[3];

	// Checks for valid number of payers.
	if (argc != 4) {
		fprintf(stderr, "Usage: push2310 typeO typeX fname\n");
		return 1;
	}

	// Checks for valid player.
	if (!isPlayer(argv[1]) || !isPlayer(argv[2])) {
		fprintf(stderr, "Invalid player type\n");
		return 2;
	}

	return start_game(game);
}