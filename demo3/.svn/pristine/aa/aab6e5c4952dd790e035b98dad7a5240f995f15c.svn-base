#include "server.h"

int handle_server(Client* client, int server_socket, struct sockaddr_in client_addr);
void* handle_connection(void* data);

int start_server(Client* client, bool sendPort) {
    struct addrinfo* ai = 0;
    struct addrinfo sa;
    struct sockaddr_in my_addr, client_addr;
    int server_socket;

    memset(&sa, 0, sizeof(struct addrinfo));
    sa.ai_family=AF_INET;
    sa.ai_socktype=SOCK_STREAM;
    sa.ai_flags=AI_PASSIVE;

    if (getaddrinfo("127.0.0.1", 0, &sa, &ai)) {
        return 1;
    }

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (bind(server_socket, (struct sockaddr*)ai->ai_addr, sizeof(struct sockaddr))) {
        return 3;
    }

    memset(&my_addr, 0, sizeof(struct sockaddr_in));
    socklen_t len = sizeof(struct sockaddr_in);
    if (getsockname(server_socket, (struct sockaddr*)&my_addr, &len)) {
        return 4;
    }
    
    client->port = ntohs(my_addr.sin_port);
    fprintf(stdout, "%u\n", client->port);
    fflush(stdout);

    if (sendPort) {
        if (!send_port(client)) {
            fprintf(stderr, "Can not connect to map\n");
            return 4;
        }
    }

    if (listen(server_socket, REQUESTS_SIZE)) {
        return 4;
    }

    return handle_server(client, server_socket, client_addr);

}

int handle_server(Client* client, int server_socket, struct sockaddr_in client_addr) {
    int client_socket;
    sem_t lock;
    pthread_t* tids = malloc(sizeof(pthread_t));
    socklen_t client_addr_size = sizeof(struct sockaddr_in);

    sem_init(&lock, 0, 1);
    client->guard = &lock;

    int tcount = 0;
    while (1) {
        client_socket = accept(server_socket, (struct sockaddr*) &client_addr, &client_addr_size);

        if (client_socket < 0) {
            return 5;
        } else {
            tcount++;
            client->socket_id = client_socket;
            tids = realloc(tids, tcount * sizeof(pthread_t));
            pthread_create(&tids[tcount-1], 0 , handle_connection, client);
        }

    }

    for (int i = 0; i < tcount; ++i) {
        void* v;
        pthread_join(tids[i], &v);
    }
    return 0;
}

void* handle_connection(void* data) {
    Client* client = (Client*) data;
    char line[BUFF_SIZE];

    FILE* stream = fdopen(client->socket_id, "r");
    FILE* out = fdopen(client->socket_id, "w");
    while(fgets(line, BUFF_SIZE, stream) != NULL) {
        client->handle_input(client, line, out);
    }

    fclose(out);
    fclose(stream);
    return NULL;
}

bool valid_input(char* line) {
    if (line == NULL) {
        return false;
    }

    int len = strlen(line);
    if (len == 0) {
        return false;
    }

    for (int i = 0; i < len; ++i) {
        if (line[i] == '\n' || line[i] == '\r' || line[i] == ':') {
            return false;
        }
    }
    return true;
}

bool send_port(Client* client) {
    int sock;
    struct sockaddr_in sai;

    sock = socket(AF_INET, SOCK_STREAM, 0);

    if (sock < 0) {
        return false;
    }
    memset(&sai, 0, sizeof(struct sockaddr_in));
    sai.sin_family = AF_INET;
    sai.sin_port = htons(client->control->port);
    sai.sin_addr.s_addr = inet_addr("127.0.0.1");

    if (connect(sock, (struct sockaddr*) &sai, sizeof(sai)) < 0) {
        return false;
    }

    char buffer[BUFF_SIZE];
    sprintf(buffer, "!%s:%d\n", client->control->id, client->port);

    if (send(sock, buffer, strlen(buffer), 0) < 0) {
        return false;
    }

    close(sock);
    return true;
}