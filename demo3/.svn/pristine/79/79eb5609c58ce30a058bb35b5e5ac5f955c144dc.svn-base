#include "roc.h"

int visit(Roc* roc);
int comm(unsigned int port);
int contact(Roc* roc, int sock);

int main(int argc, char** argv) {
    Roc* roc = malloc(sizeof(Roc));

    if (argc < 3) {
        fprintf(stderr, "Usage: roc2310 id mapper {airports}\n");
        return 1;
    }

    roc->id = calloc(strlen(argv[1]), sizeof(char));
    roc->id = argv[1];

    if(strcmp(argv[2], "-") != 0) {
        int mapper = atoi(argv[2]);
        if (!valid_port(mapper)) {
            fprintf(stderr, "Invalid mapper port\n");
            return 2;
        } else {
            roc->port = htons(mapper);
        }
    }

    roc->numAirports = argc - 3;
    roc->airports = calloc(argc-3, sizeof(char*));
    for (int i = 3; i < argc; ++i) {
        roc->airports[i - 3] = malloc(strlen(argv[i]));
        strcpy(roc->airports[i - 3], argv[i]);
    }


    return visit(roc);
}

int visit(Roc* roc) {
    for (int i = 0; i < roc->numAirports; ++i) {
        //printf("%s\n", roc->airports[i]);
        int port = atoi(roc->airports[i]);
        if (valid_port(port)) {
            int sock = comm(port);
            contact(roc, sock);
        } else if (roc->port == 0){
            fprintf(stderr, "Mapper required\n");
            return 3;
        }
    }
    return 0;
}

int contact(Roc* roc, int sock) {
    FILE* out = fdopen(sock, "w");
    FILE* in = fdopen(sock, "r");
    char buffer[BUFF_SIZE];


    fprintf(out, "%s\n", roc->id);
    fflush(out);

    fgets(buffer, BUFF_SIZE, in);
    fprintf(stdout, "%s", buffer);

    fclose(in);
    fclose(out);
    return 0;
}


int comm(unsigned int port) {
    int sock;
    struct sockaddr_in sai;

    sock = socket(AF_INET, SOCK_STREAM, 0);

    if (sock < 0) {
        return -1;
    }
    memset(&sai, 0, sizeof(struct sockaddr_in));
    sai.sin_family = AF_INET;
    sai.sin_port = htons(port);
    sai.sin_addr.s_addr = inet_addr("127.0.0.1");

    if (connect(sock, (struct sockaddr*) &sai, sizeof(sai)) < 0) {
        return -1;
    }

    return sock;
}
