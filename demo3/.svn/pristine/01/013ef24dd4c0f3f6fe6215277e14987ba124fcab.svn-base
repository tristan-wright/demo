#include "server.h"

void* handle_connection(void* data);

int start_server(Client* client) {
    struct addrinfo* ai = 0;
    struct addrinfo SA;
    struct sockaddr_in my_addr, client_addr;
    sem_t lock;
    pthread_t* tids = malloc(sizeof(pthread_t));

    int server_socket, client_socket;

    memset(&SA, 0, sizeof(struct addrinfo));
    SA.ai_family=AF_INET;
    SA.ai_socktype=SOCK_STREAM;
    SA.ai_flags=AI_PASSIVE;
    if (getaddrinfo("localhost", 0, &SA, &ai)) {
        return 1;
    }

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (bind(server_socket, (struct sockaddr*)ai->ai_addr, sizeof(struct sockaddr))) {
        return 3;
    }

    memset(&my_addr, 0, sizeof(struct sockaddr_in));
    socklen_t len = sizeof(struct sockaddr_in);
    if (getsockname(server_socket, (struct sockaddr*)&my_addr, &len)) {
        return 4;
    }
    fprintf(stdout, "%u\n", ntohs(my_addr.sin_port));
    fflush(stdout);

    if (listen(server_socket, REQUESTS_SIZE)) {
        return 4;
    }

    socklen_t client_addr_size = sizeof(struct sockaddr_in);

    sem_init(&lock, 0, 1);
    client->guard = &lock;

    int tcount = 0;
    while (1) {
        client_socket = accept(server_socket, (struct sockaddr*) &client_addr, &client_addr_size);

        if (client_socket < 0) {
            return 5;
        } else {
            tcount++;
            client->socket_id = client_socket;
            tids = realloc(tids, tcount * sizeof(pthread_t));
            pthread_create(&tids[tcount-1], 0 , handle_connection, client);
        }

    }

    for (int i = 0; i < tcount; ++i) {
        void* v;
        pthread_join(tids[i], &v);
    }

    return 0;
}

void* handle_connection(void* data) {
    Client* client = (Client*) data;
    char line[BUFF_SIZE];

    FILE* stream = fdopen(client->socket_id, "r");
    FILE* out = fdopen(client->socket_id, "w");
    while(fgets(line, BUFF_SIZE, stream) != NULL) {
        client->handle_input(client, line, out);
    }

    fclose(out);
    fclose(stream);
    return NULL;
}

bool valid_input(char* line) {
    if (line == NULL) {
        return false;
    }

    int len = strlen(line);
    if (len == 0) {
        return false;
    }

    for (int i = 0; i < len; ++i) {
        if (line[i] == '\n' || line[i] == '\r' || line[i] == ':') {
            return false;
        }
    }
    return true;
}