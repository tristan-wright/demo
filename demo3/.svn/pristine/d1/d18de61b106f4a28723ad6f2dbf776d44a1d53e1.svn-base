#include "mapper.h"

void* handle_connection(void* data);
void handle_input(Map* dict, char* line, FILE* stream);
void add_map(Map* dict, char* line);
void get_map(Map* dict, char* line, FILE* stream);
void list_map(Map* dict, FILE* stream);
bool valid_input(char* line);
bool valid_port(char* key);
bool in_map(Map* dict, char* key);
void sort_map(Map* dict);

int main(int argc, char** argv) {
    Client* data = malloc(sizeof(Client));
    data->dict = malloc(sizeof(Map));
    data->dict->map = malloc(sizeof(Pair));
    data->dict->numMap = 0;

    return start_server(handle_connection, data);
}

void* handle_connection(void* data) {
    int client = ((Client*)data)->socket_id;
    char line[BUFF_SIZE];

    FILE* stream = fdopen(client, "w+");
    while(fgets(line, BUFF_SIZE, stream) != NULL) {
        handle_input(((Client*)data)->dict, line, stream);
    }

    return NULL;
}

void handle_input(Map* dict, char* line, FILE* stream) {
    line[strlen(line) - 1] = '\0';
    if (strcmp(line, "@") == 0) {
        list_map(dict, stream);
    } else if (line[0] == '!') {
        line = &line[1];
        add_map(dict, line);
    } else if (line[0] == '?') {
        line = &line[1];
        get_map(dict, line, stream);
    }
}

// Threads

void add_map(Map* dict, char* line) {
    char* key;
    char* val;

    if (strlen(line) < 3 || strstr(line, ":") == NULL) {
        return;
    }

    key = strtok(line, ":");
    val = strtok(NULL, ":");

    if (!valid_input(key) || !valid_input(val)
        || in_map(dict, key) || !valid_port(val)) {
        return;
    }

    Pair* pair = malloc(sizeof(Pair));
    pair->key = calloc(strlen(key) + 1, sizeof(char));
    strcpy(pair->key, key);

    pair->val = calloc(strlen(val) + 1, sizeof(char));
    strcpy(pair->val, val);

    dict->map = realloc(dict->map, sizeof(Pair) * (dict->numMap + 1));
    dict->map[dict->numMap] = *pair;
    dict->numMap += 1;

    sort_map(dict);


}

void get_map(Map* dict, char* line, FILE* stream) {
    char buff[BUFF_SIZE];
    for (int i = 0; i < dict->numMap; ++i) {
        if (strcmp(dict->map[i].key, line) == 0) {
            sprintf(buff, "%s\n", dict->map[i].val);
            fputs(buff, stream);
            fflush(stream);
            return;
        }
    }
    sprintf(buff, ";\n");
    fputs(buff, stream);
    fflush(stream);
}

void list_map(Map* dict, FILE* stream) {
    char buff[BUFF_SIZE];
    for (int i = 0; i < dict->numMap; ++i) {
        sprintf(buff, "%s:%s\n", dict->map[i].key, dict->map[i].val);
        fputs(buff, stream);
    }
    fflush(stream);
}

bool valid_input(char* line) {
    if (line == NULL) {
        return false;
    }

    int len = strlen(line);
    if (len == 0) {
        return false;
    }

    for (int i = 0; i < len; ++i) {
        if (line[i] == '\n' || line[i] == '\r' || line[i] == ':') {
            return false;
        }
    }
    return true;
}

bool in_map(Map* dict, char* key) {
    for (int i = 0; i < dict->numMap; ++i) {
        if (strcmp(dict->map[i].key, key) == 0) {
            return true;
        }
    }
    return false;
}

bool valid_port(char* key) {
    for (int i = 0; i < strlen(key); ++i) {
        if (!isdigit(key[i])) {
            return false;
        }
    }
    return true;
}

void sort_map(Map* dict) {
    for (int i = 0; i < dict->numMap; ++i) {
        for (int j = i + 1; j < dict->numMap; ++j) {
            Pair* first = &dict->map[i];
            Pair* second = &dict->map[j];
            Pair temp;
            if (strcmp(first->key, second->key) > 0) {
                temp = *first;
                dict->map[i] = *second;
                dict->map[j] = temp;
            }
        }
    }
}